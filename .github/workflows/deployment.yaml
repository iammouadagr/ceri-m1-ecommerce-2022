name: Deployment 
run-name: Continuous Integration Continuous Deployment workflow 
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
    branches:
      - main
jobs:
  api-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - 
        name: Install dependencies
        run: npm install
        working-directory: ./backend
      #- 
        #name: Run tests
        #run: npm test
        #working-directory: ./backend
      - 
        name: Create Environment variables file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          directory: ./backend
          file_name: .env
          PORT: ${{ secrets.PORT}}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          MYSQLDB_LOCAL_PORT: ${{ secrets.MYSQLDB_LOCAL_PORT }}
          NODE_LOCAL_PORT: ${{ secrets.NODE_LOCAL_PORT }}
          fail_on_empty: true
      -
        name: Login to registry
        run: docker login -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} ${{ secrets.DOCKER_REGISTRY}}
        
      - 
        name: Build docker image
        working-directory: ./backend
        run: docker build -t backend-app .
      -
        name: Tag docker image
        run: docker tag backend-app europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/blackcat/backend-app:1.0.0
      -
        name: Push docker image
        run: docker push europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/blackcat/backend-app:1.0.0

      

  webapp-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - 
        name: Install dependencies
        run: npm install
        working-directory: ./frontend
      - 
        name: Install angular/cli
        run: npm install -g @angular/cli
        working-directory: ./frontend
      - 
        name: Build
        run: npm run build
        working-directory: ./frontend
      #- 
        #name: Run tests
        #run: npm test
        #working-directory: ./frontend
      -
        name: Login to registry
        run: docker login -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} ${{ secrets.DOCKER_REGISTRY}}
      - 
        name: Build docker image
        working-directory: ./frontend
        run: docker build -t frontend-app .
      - 
        name: Tag docker image
        run: docker tag frontend-app europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/blackcat/frontend-app:latest
      -
        name: Push docker image
        run: docker push europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/blackcat/frontend-app:latest

      
  delivery:
    needs: [api-build,webapp-build]
    name: Countinuous delivery
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
        with:
          ref: dev
      -
        name: Get latest tag
        run: git tag
  deployment:
    needs : delivery
    name: Countinuous deployment
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -  
        name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.API_TF_TOKEN }}
      # -
      #   name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check
      - 
        name: Terraform Init
        id: init
        run: terraform init
      -
        name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - 
        name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - 
        name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - 
        name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1  
      - 
        name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false  
                          

        